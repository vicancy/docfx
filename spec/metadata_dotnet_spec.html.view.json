{"_lang":"csharp","_tocPath":"spec/toc.html","_navPath":"toc.html","_rel":"../","_path":"spec/metadata_dotnet_spec.html","_navRel":"../toc.html","_tocRel":"toc.html","_navKey":"~/../toc.yml","_tocKey":"~/../spec/toc.md","conceptual":"\n<h2 id=\"0-introduction\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"4\" sourceendlinenumber=\"5\">0. Introduction</h2>\n<h3 id=\"01-goal-and-non-goals\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"7\" sourceendlinenumber=\"7\">0.1 Goal and Non-goals</h3>\n<h3 id=\"02-terminology\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"9\" sourceendlinenumber=\"9\">0.2 Terminology</h3>\n<h2 id=\"1-items\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"11\" sourceendlinenumber=\"12\">1. Items</h2>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"14\" sourceendlinenumber=\"14\">The following .NET elements are defined as <em>items</em> in metadata:</p>\n<ol sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"16\" sourceendlinenumber=\"18\">\n<li sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"16\" sourceendlinenumber=\"16\">Namespaces</li>\n<li sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"17\" sourceendlinenumber=\"17\">Types, including class, struct, interface, enum, delegate</li>\n<li sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"18\" sourceendlinenumber=\"18\">Type members, including field, property, method, event</li>\n</ol>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">Other elements such as parameters and generic parameters are not standalone <em>items</em>, they&#39;re part of other <em>items</em>.</p>\n<h2 id=\"2-identifiers\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"22\" sourceendlinenumber=\"23\">2. Identifiers</h2>\n<h3 id=\"21-unique-identifiers\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">2.1 Unique Identifiers</h3>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"27\" sourceendlinenumber=\"28\">For any <em>item</em> in .NET languages, its <em>UID</em> is defined by concatenating its <em>parent</em>&#39;s <em>UID</em> and its own <em>ID</em> with a dot.\nThe <em>ID</em> for each kind of item is defined in following sections. The basic principle here is to make <em>ID</em> format close to source code and easy for human reading.</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"30\" sourceendlinenumber=\"30\"><em>UID</em> is similar to the document comment id, which is started with type prefix, for example, <code>T:</code>, or <code>M:</code>, but <em>UID</em> do not.</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"32\" sourceendlinenumber=\"32\">There <strong>MUST NOT</strong> be any whitespace between method name, parentheses, parameters, and commas.</p>\n<h3 id=\"22-spec-identifiers\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">2.2 Spec Identifiers</h3>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"37\">Spec identifier is another form of <em>UID</em>.\nIt can spec a generic type with type arguments (for example, for parameters, return types or inheritances) and these <em>UID</em>s are unique in one yaml file. </p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"39\" sourceendlinenumber=\"41\">It is a simple modified Unique Identifiers, when it contains generic type arguments, it will use <code>{Name}</code> instead <code>`N</code>.\nFor type parameter, it will be <code>{Name}</code>.\nAnd it also supports array and pointer.</p>\n<blockquote sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"43\" sourceendlinenumber=\"43\"><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"43\" sourceendlinenumber=\"43\">Example 2.2 Spec Identifier</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"45\" sourceendlinenumber=\"45\">C#:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"46\" sourceendlinenumber=\"57\"><code class=\"lang-csharp\">namespace Foo\n{\n   public class Bar\n   {\n      public unsafe List&lt;String&gt; FooBar&lt;TArg&gt;(int[] arg1, byte* arg2, TArg arg3, List&lt;TArg[]&gt; arg4)\n      {\n          return null;\n      }\n   }\n}\n</code></pre><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"58\" sourceendlinenumber=\"58\">YAML:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"59\" sourceendlinenumber=\"66\"><code class=\"lang-yaml\">references:\n- uid: System.Collections.Generic.List{System.String}\n- uid: System.Int32[]\n- uid: System.Byte*\n- uid: {TArg}\n- uid: System.Collections.Generic.List{{TArg}[]}\n</code></pre></blockquote>\n<h2 id=\"3-namespaces\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"68\" sourceendlinenumber=\"69\">3. Namespaces</h2>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"71\" sourceendlinenumber=\"72\">For all namespaces, they are flat, e.i. namespaces do not have the parent namespace.\nSo for any namespace, <em>ID</em> is always same with its <em>UID</em>. </p>\n<blockquote sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"74\" sourceendlinenumber=\"74\"><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"74\" sourceendlinenumber=\"74\">Example 3 Namespace</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"76\" sourceendlinenumber=\"76\">C#:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"77\" sourceendlinenumber=\"81\"><code class=\"lang-csharp\">namespace System.IO\n{\n}\n</code></pre><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"82\" sourceendlinenumber=\"82\">YAML:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"83\" sourceendlinenumber=\"88\"><code class=\"lang-yaml\">uid: System.IO\nid: System.IO\nname: System.IO\nfullName: System.IO\n</code></pre></blockquote>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"90\" sourceendlinenumber=\"90\">The children of namespace are all the visible types in the namespace.</p>\n<h2 id=\"4-types\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"92\" sourceendlinenumber=\"93\">4. Types</h2>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"95\" sourceendlinenumber=\"98\">Types include classes, structs, interfaces, enums, and delegates.\nThey have following properties: summary, remarks, syntax, namespace, assemblies, inheritance.\nThe <em>parents</em> of types are namespaces.\nThe <em>children</em> of types are members.</p>\n<h4 id=\"id\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"100\" sourceendlinenumber=\"100\">ID</h4>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"101\" sourceendlinenumber=\"101\"><em>ID</em> for a type is also its <em>name</em>.</p>\n<blockquote sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"103\" sourceendlinenumber=\"103\"><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"103\" sourceendlinenumber=\"103\">Example 4 Type</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"105\" sourceendlinenumber=\"105\">C#:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"106\" sourceendlinenumber=\"115\"><code class=\"lang-csharp\">namespace System\n{\n    public class String {}\n    public struct Boolean {}\n    public interface IComparable {}\n    public enum ConsoleColor {}\n    public delegate void Action();\n}\n</code></pre><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"116\" sourceendlinenumber=\"116\">YAML:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"117\" sourceendlinenumber=\"138\"><code class=\"lang-yaml\">- uid: System.String\n  id: String\n  name.csharp: String\n  fullName.csharp: System.String\n- uid: System.Boolean\n  id: Boolean\n  name.csharp: Boolean\n  fullName.csharp: System.String\n- uid: System.IComparable\n  id: IComparable\n  name.csharp: IComparable\n  fullName.csharp: System.IComparable\n- uid: System.ConsoleColor\n  id: ConsoleColor\n  name.csharp: ConsoleColor\n  fullName.csharp: System.ConsoleColor\n- uid: System.Action\n  id: Action\n  name.csharp: Action\n  fullName.csharp: System.Action\n</code></pre></blockquote>\n<h4 id=\"41-id-for-nested-types\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"140\" sourceendlinenumber=\"140\">4.1 ID for Nested Types</h4>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"142\" sourceendlinenumber=\"142\">For nested types, <em>ID</em> is defined by concatenating the <em>ID</em> of all its containing types and the <em>ID</em> of itself, separated by a dot.</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"144\" sourceendlinenumber=\"144\">The parent type of a nested type is its containing namespace, rather than its containing type.</p>\n<blockquote sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"146\" sourceendlinenumber=\"146\"><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"146\" sourceendlinenumber=\"146\">Example 4.1 Nested type</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"148\" sourceendlinenumber=\"148\">C#:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"149\" sourceendlinenumber=\"157\"><code class=\"lang-csharp\">namespace System\n{\n    public class Environment\n    {\n        public enum SpecialFolder {}\n    }\n}\n</code></pre><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"158\" sourceendlinenumber=\"158\">YAML:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"159\" sourceendlinenumber=\"164\"><code class=\"lang-yaml\">uid: System.Environment.SpecialFolder\nid: Environment.SpecialFolder\nname.csharp: Environment.SpecialFolder\nfullName.csharp: System.Environment.SpecialFolder\n</code></pre></blockquote>\n<h4 id=\"42-inheritance\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"166\" sourceendlinenumber=\"166\">4.2 Inheritance</h4>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"168\" sourceendlinenumber=\"168\">Only class contains inheritance, and the inheritance is a list of spec id.</p>\n<blockquote sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"170\" sourceendlinenumber=\"170\"><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"170\" sourceendlinenumber=\"170\">Example 4.2 Inheritance</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"172\" sourceendlinenumber=\"172\">C#:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"173\" sourceendlinenumber=\"180\"><code class=\"lang-csharp\">namespace System.Collections.Generic\n{\n    public class KeyedByTypeCollection&lt;TItem&gt; : KeyedCollection&lt;Type, TItem&gt;\n    {\n    }\n}\n</code></pre><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"181\" sourceendlinenumber=\"181\">YAML:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"182\" sourceendlinenumber=\"188\"><code class=\"lang-yaml\">uid : System.Collections.Generic.KeyedByTypeCollection`1\ninheritance:\n- System.Collections.ObjectModel.KeyedCollection{System.Type,{TItem}}\n- System.Collections.ObjectModel.Collection{{TItem}}\n- System.Object\n</code></pre></blockquote>\n<h4 id=\"43-syntax\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"190\" sourceendlinenumber=\"190\">4.3 Syntax</h4>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"192\" sourceendlinenumber=\"193\">The syntax part for type contains declaration, and descriptions of type parameters for different languages.\nFor delegates, it also contains descriptions of parameters and a return type.</p>\n<h2 id=\"5-members\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"195\" sourceendlinenumber=\"196\">5. Members</h2>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"198\" sourceendlinenumber=\"202\">Members include fields, properties, methods, and events.\nThey have the following properties: summary, remarks, exceptions, and syntax.\nThe parents of members are types.\nMembers never have children, and\nall parameter types or return types are spec id.</p>\n<h4 id=\"51-constructors\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"204\" sourceendlinenumber=\"204\">5.1 Constructors</h4>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"206\" sourceendlinenumber=\"207\">The <em>ID</em> of a constructor is defined by <code>#ctor</code>, followed by the list of the <em>UIDs</em> of its parameter types:\nWhen a constructor does not have parameter, its <em>ID</em> <strong>MUST NOT</strong> end with parentheses.</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"209\" sourceendlinenumber=\"209\">The syntax part for constructors contains a special language declaration, and descriptions of parameters.</p>\n<blockquote sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"211\" sourceendlinenumber=\"211\"><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"211\" sourceendlinenumber=\"211\">Example 5.1 Constructor</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"213\" sourceendlinenumber=\"213\">C#:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"214\" sourceendlinenumber=\"223\"><code class=\"lang-csharp\">namespace System\n{\n    public sealed class String\n    {\n        public String();\n        public String(char[] chars);\n    }\n}\n</code></pre><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"224\" sourceendlinenumber=\"224\">YAML:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"225\" sourceendlinenumber=\"234\"><code class=\"lang-yaml\">- uid: System.String.#ctor\n  id: #ctor\n  name.csharp: String()\n  fullName.csharp: System.String.String()\n- uid: System.String.#ctor(System.Char[])\n  id: #ctor(System.Char[])\n  name.csharp: String(Char[])\n  fullName.csharp: System.String.String(System.Char[])\n</code></pre></blockquote>\n<h4 id=\"52-methods\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"236\" sourceendlinenumber=\"236\">5.2 Methods</h4>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"238\" sourceendlinenumber=\"238\">The <em>ID</em> of a method is defined by its name, followed by the list of the <em>UIDs</em> of its parameter types:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"239\" sourceendlinenumber=\"241\"><code class=\"lang-yaml\">method_name(param1,param2,...)\n</code></pre><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"243\" sourceendlinenumber=\"243\">When a method does not have parameter, its <em>ID</em> <strong>MUST</strong> end with parentheses.</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"245\" sourceendlinenumber=\"245\">The syntax part for method contains a special language declaration, and descriptions of type parameters for generic method, descriptions of parameters and return type.</p>\n<blockquote sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"247\" sourceendlinenumber=\"247\"><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"247\" sourceendlinenumber=\"247\">Example 5.2 Method</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"249\" sourceendlinenumber=\"249\">C#:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"250\" sourceendlinenumber=\"259\"><code class=\"lang-csharp\">namespace System\n{\n    public sealed class String\n    {\n        public String ToString();\n        public String ToString(IFormatProvider provider);\n    }\n}\n</code></pre><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"260\" sourceendlinenumber=\"260\">YAML:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"261\" sourceendlinenumber=\"270\"><code class=\"lang-yaml\">- uid: System.String.ToString\n  id: ToString\n  name.csharp: ToString()\n  fullName.csharp: System.String.ToString()\n- uid: System.String.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  name.csharp: ToString(IFormatProvider)\n  fullName.csharp: System.String.ToString(System.IFormatProvider)\n</code></pre></blockquote>\n<h4 id=\"521-explicit-interface-implementation\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"272\" sourceendlinenumber=\"272\">5.2.1 Explicit Interface Implementation</h4>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"274\" sourceendlinenumber=\"274\">The <em>ID</em> of an explicit interface implementation (EII) member <strong>MUST</strong> be prefixed by the <em>UID</em> of the interface it implements and replace <code>.</code> to <code>#</code>.</p>\n<blockquote sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"276\" sourceendlinenumber=\"276\"><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"276\" sourceendlinenumber=\"276\">Example 2.6 Explicit interface implementation (EII)</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"278\" sourceendlinenumber=\"278\">C#:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"279\" sourceendlinenumber=\"289\"><code class=\"lang-csharp\">namespace System\n{\n    using System.Collections;\n\n    public sealed class String : IEnumerable\n    {\n        IEnumerator IEnumerable.GetEnumerator();\n    }\n}\n</code></pre><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"290\" sourceendlinenumber=\"290\">YAML:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"291\" sourceendlinenumber=\"296\"><code class=\"lang-yaml\">- uid: &quot;System.String.System#Collections#IEnumerable#GetEnumerator&quot;\n  id: &quot;System#Collections#IEnumerable#GetEnumerator&quot;\n  name.csharp: IEnumerable.GetEnumerator()\n  fullName.csharp: System.String.System.Collections.IEnumerable.GetEnumerator()\n</code></pre></blockquote>\n<h4 id=\"54-operator-overloads\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"298\" sourceendlinenumber=\"298\">5.4 Operator Overloads</h4>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"300\" sourceendlinenumber=\"302\">The <em>IDs</em> of operator overloads are same with the metadata name (for example, <code>op_Equality</code>).\nThe names of operator overloads are similar to MSDN, just remove <code>op_</code> from the metadata name of the method.\nFor instance, the name of the equals (<code>==</code>) operator is <code>Equality</code>.</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"304\" sourceendlinenumber=\"304\">Type conversion operator can be considered a special operator whose name is the UID of the target type, with one parameter of the source type. For example, an operator that converts from string to int should be <code>Explicit(System.String to System.Int32)</code>.</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"306\" sourceendlinenumber=\"306\">The syntax part for methods contains a special language declaration, descriptions of parameters and return type.</p>\n<blockquote sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"308\" sourceendlinenumber=\"308\"><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"308\" sourceendlinenumber=\"308\">Example 5.4 Operator overload</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"310\" sourceendlinenumber=\"323\"><code class=\"lang-csharp\">namespace System\n{\n    public struct Decimal\n    {\n        public static implicit operator Decimal(Char value);\n    }\n\n    public sealed class String\n    {\n        public static bool operator ==(String a, String b);\n    }\n}\n</code></pre><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"324\" sourceendlinenumber=\"324\">YAML:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"325\" sourceendlinenumber=\"334\"><code class=\"lang-yaml\">- uid: System.Decimal.op_Implicit(System.Char to System.Decimal)\n  id: op_Implicit(System.Char to System.Decimal)\n  name.csharp: Implicit(Char to Decimal)\n  fullName.csharp: System.Decimal.Implicit(System.Char to System.Decimal)\n- uid: System.String.op_Equality(System.String,System.String)\n  id: op_Equality(System.String,System.String)\n  name.csharp: Equality(String,String)\n  fullName.csharp: System.String.Equality(System.String,System.String)\n</code></pre></blockquote>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"336\" sourceendlinenumber=\"336\">Please check <a href=\"https://msdn.microsoft.com/en-us/library/8edha89s.aspx\" data-raw-source=\"[overloadable operators][1]\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"336\" sourceendlinenumber=\"336\">overloadable operators</a> for all overloadable operators.</p>\n<h4 id=\"55-field-property-or-event\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"338\" sourceendlinenumber=\"338\">5.5 Field, Property or Event</h4>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"340\" sourceendlinenumber=\"343\">The <em>ID</em> of field, property or event is its name.\nThe syntax part for field contains a special language declaration and descriptions of field type.\nFor property, it contains a special language declaration, descriptions of parameters, and return type.\nFor event, it contains a special language declaration and descriptions of event handler type.</p>\n<blockquote sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"345\" sourceendlinenumber=\"345\"><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"345\" sourceendlinenumber=\"345\">Example 5.5 Field, Property and Event</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"347\" sourceendlinenumber=\"347\">C#:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"348\" sourceendlinenumber=\"362\"><code class=\"lang-csharp\">namespace System\n{\n    public sealed class String\n    {\n        public static readonly String Empty;\n        public int Length { get; }\n    }\n\n    public static class Console\n    {\n        public static event ConsoleCancelEventHandler CancelKeyPress;\n    }\n}\n</code></pre><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"363\" sourceendlinenumber=\"363\">YAML:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"364\" sourceendlinenumber=\"377\"><code class=\"lang-yaml\">- uid: System.String.Empty\n  id: Empty\n  name.csharp: Empty\n  fullName.csharp: System.String.Empty\n- uid: System.String.Length\n  id: Length\n  name.csharp: Length\n  fullName.csharp: System.String.Length\n- uid: System.Console.CancelKeyPress\n  id: CancelKeyPress\n  name.csharp: CancelKeyPress\n  fullName.csharp: System.Console.CancelKeyPress\n</code></pre></blockquote>\n<h4 id=\"56-indexer\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"379\" sourceendlinenumber=\"379\">5.6 Indexer</h4>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"381\" sourceendlinenumber=\"381\">Indexer operator&#39;s name is metadata name, by default, it is <code>Item</code>, with brackets and parameters.</p>\n<blockquote sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"383\" sourceendlinenumber=\"383\"><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"383\" sourceendlinenumber=\"383\">Example 5.6 Indexer</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"385\" sourceendlinenumber=\"393\"><code class=\"lang-csharp\">namespace System.Collections\n{\n    public interface IList\n    {\n        object this[int index] { get; set; }\n    }\n}\n</code></pre><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"394\" sourceendlinenumber=\"394\">YAML:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"395\" sourceendlinenumber=\"400\"><code class=\"lang-yaml\">- uid: &quot;System.Collections.IList.Item[System.Int32]&quot;\n  id: &quot;Item[System.Int32]&quot;\n  name.csharp: Item[Int32]\n  fullName.csharp: System.Collections.IList.Item[System.Int32]\n</code></pre></blockquote>\n<h2 id=\"6-generics\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"402\" sourceendlinenumber=\"403\">6. Generics</h2>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"405\" sourceendlinenumber=\"406\">The <em>ID</em> of a generic type is its name with followed by <code>`n</code>, <code>n</code> and the count of generic type count, which is the same as the rule for document comment ID.\nFor example, <code>Dictionary`2</code>.</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"408\" sourceendlinenumber=\"408\">The <em>ID</em> of a generic method uses postfix <code>``n</code>, <code>n</code> is the count of in method parameters, for example, <code>System.Tuple.Create``1(``0)</code>.</p>\n<blockquote sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"410\" sourceendlinenumber=\"410\"><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"410\" sourceendlinenumber=\"410\">Example 2.7 Generic</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"412\" sourceendlinenumber=\"421\"><code class=\"lang-csharp\">namespace System\n{\n    public static class Tuple\n    {\n        public static Tuple&lt;T1&gt; Create&lt;T1&gt;(T1 item1);\n        public static Tuple&lt;T1, T2&gt; Create&lt;T1, T2&gt;(T1 item1, T2 item2);\n    }\n}\n</code></pre><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"422\" sourceendlinenumber=\"422\">YAML:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"423\" sourceendlinenumber=\"432\"><code class=\"lang-yaml\">- uid: System.Tuple.Create``1(``0)\n  id: Create``1(``0)\n  name.csharp:  Create&lt;T1&gt;(T1)\n  fullName.csharp: System.Tuple.Create&lt;T1&gt;(T1)\n- uid: System.Tuple.Create``2(``0,``1)\n  id: Create``2(``0,``1)\n  name.csharp:  Create&lt;T1,T2&gt;(T1,T2)\n  fullName.csharp: System.Tuple.Create&lt;T1,T2&gt;(T1,T2)\n</code></pre></blockquote>\n<h2 id=\"7-reference\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"434\" sourceendlinenumber=\"435\">7. Reference</h2>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"437\" sourceendlinenumber=\"438\">The reference contains the following members:\n  name, fullName, summary, isExternal, href, and more.</p>\n<p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"440\" sourceendlinenumber=\"441\">The <em>UID</em> in reference can be a <em>Spec Id</em>, then it contains one more member: spec.\nThe <em>spec</em> in reference is very like a list of lightweight references, it describes how to compose the generic type in some special language.</p>\n<blockquote sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"443\" sourceendlinenumber=\"443\"><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"443\" sourceendlinenumber=\"443\">Example 7 <em>spec</em> for references</p>\n</blockquote>\n<blockquote sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"445\" sourceendlinenumber=\"445\"><p sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"445\" sourceendlinenumber=\"445\">YAML:</p>\n<pre sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"446\" sourceendlinenumber=\"478\"><code class=\"lang-yaml\">references:\n- uid: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int32}}\n  name.csharp: Dictionary&lt;String, List&lt;Int32&gt;&gt;\n  fullName.csharp: System.Collections.Generic.Dictionary&lt;System.String, System.Collections.Generic.List&lt;System.Int32&gt;&gt;\n  spec.csharp:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n    isExternal: true\n  - name: &lt;\n    fullName: &lt;\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: &#39;, &#39;\n    fullName: &#39;, &#39;\n  - uid: System.Collections.Generic.List`1\n    name: List\n    fullName: System.Collections.Generic.List\n    isExternal: true\n  - name: &lt;\n    fullName: &lt;\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: &#39;&gt;&#39;\n    fullName: &#39;&gt;&#39;\n  - name: &#39;&gt;&#39;\n    fullName: &#39;&gt;&#39;\n</code></pre></blockquote>\n","type":"Conceptual","source":{"remote":{"path":"Documentation/spec/metadata_dotnet_spec.md","branch":"doc","repo":"https://github.com/dotnet/docfx.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"path":"../spec/metadata_dotnet_spec.md","documentation":{"remote":{"path":"Documentation/spec/metadata_dotnet_spec.md","branch":"doc","repo":"https://github.com/dotnet/docfx.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"_docfxVersion":"2.15.0.424","_systemKeys":["conceptual","type","source","path","documentation","title","rawTitle","wordCount"],"title":"DocFx: Metadata Format for .NET Languages","rawTitle":"<h1 id=\"docfx-metadata-format-for-net-languages\" sourcefile=\"../spec/metadata_dotnet_spec.md\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"2\">DocFx: Metadata Format for .NET Languages</h1>","wordCount":1442.0,"__global":{"classesInSubtitle":"Classes","structsInSubtitle":"Structs","interfacesInSubtitle":"Interfaces","enumsInSubtitle":"Enums","delegatesInSubtitle":"Delegates","constructorsInSubtitle":"Constructors","fieldsInSubtitle":"Fields","propertiesInSubtitle":"Properties","methodsInSubtitle":"Methods","eventsInSubtitle":"Events","operatorsInSubtitle":"Operators","eiisInSubtitle":"Explicit Interface Implementations","improveThisDoc":"Improve this Doc","viewSource":"View Source","inheritance":"Inheritance","inheritedMembers":"Inherited Members","namespace":"Namespace","assembly":"Assembly","syntax":"Syntax","overrides":"Overrides","implements":"Implements","remarks":"Remarks","examples":"Examples","seealso":"See Also","declaration":"Declaration","parameters":"Parameters","typeParameters":"Type Parameters","type":"Type","name":"Name","description":"Description","returns":"Returns","fieldValue":"Field Value","propertyValue":"Property Value","eventType":"Event Type","exceptions":"Exceptions","condition":"Condition","extensionMethods":"Extension Methods","note":"<h5>Note</h5>","warning":"<h5>Warning</h5>","tip":"<h5>Tip</h5>","important":"<h5>Important</h5>","caution":"<h5>Caution</h5>","_shared":{}},"_disableToc":false,"docurl":"https://github.com/dotnet/docfx/blob/doc/Documentation/spec/metadata_dotnet_spec.md/#L1"}