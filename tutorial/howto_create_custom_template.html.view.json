{"_lang":"csharp","_tocPath":"tutorial/toc.html","_navPath":"toc.html","_rel":"../","_path":"tutorial/howto_create_custom_template.html","_navRel":"../toc.html","_tocRel":"toc.html","_navKey":"~/../toc.yml","_tocKey":"~/../tutorial/toc.yml","conceptual":"\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"4\" sourceendlinenumber=\"4\">Templates are organized as a zip package or a folder. The file path (without the <code>.zip</code> extension) of the zip package or the path of the folder is considered to be the template name.</p>\n<h2 id=\"quickstart\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"6\" sourceendlinenumber=\"7\">Quickstart</h2>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"8\" sourceendlinenumber=\"8\">Let&#39;s create a template to transform Markdown files into a simple html file.</p>\n<h3 id=\"step-1-create-a-template-folder\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"10\" sourceendlinenumber=\"10\">Step 1. Create a template folder</h3>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"11\" sourceendlinenumber=\"11\">Create a folder for the template, for example, <code>c:/docfx_howto/simple_template</code>.</p>\n<h3 id=\"step-2-add-renderer-file\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"13\" sourceendlinenumber=\"13\">Step 2. Add <em>Renderer</em> file</h3>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"14\" sourceendlinenumber=\"14\">Create a file <code>conceptual.html.primary.tmpl</code> under the template folder with the following content:</p>\n<pre sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"16\" sourceendlinenumber=\"18\"><code class=\"lang-mustache\">{{{conceptual}}}\n</code></pre><p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">Now a simple custom template is created.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"22\" sourceendlinenumber=\"22\">You may notice that DocFX reports a warning message saying that: <em>Warning: [Build Document.Apply Templates]There is no template processing document type(s): Toc</em>. It is because our custom template only specifies how to handle document with type <code>conceptual</code>.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"24\" sourceendlinenumber=\"24\">To test the output of the template, create a simple documentation project following <a href=\"~/../tutorial/walkthrough/walkthrough_create_a_docfx_project.md\" data-raw-source=\"[Walkthrough Part I](walkthrough/walkthrough_create_a_docfx_project.md)\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"24\" sourceendlinenumber=\"24\">Walkthrough Part I</a> or download the <a href=\"walkthrough/artifacts/walkthrough1.zip\" data-raw-source=\"[zipped documentation project](walkthrough/artifacts/walkthrough1.zip)\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"24\" sourceendlinenumber=\"24\">zipped documentation project</a> directly.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"26\" sourceendlinenumber=\"26\">In the documentation project, run <code>docfx build docfx.json -t c:/docfx_howto/simple_template --serve</code>. The <code>-t</code> command option specifies the template name(s) used by the current build.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"28\" sourceendlinenumber=\"28\">Open <a href=\"http://localhost:8080\" data-raw-source=\"http://localhost:8080\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"28\" sourceendlinenumber=\"28\">http://localhost:8080</a> and you can see a simple web page as follows:</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"30\" sourceendlinenumber=\"30\"><img src=\"images/simple_web_page.png\" alt=\"Simple Web Page\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"30\" sourceendlinenumber=\"30\"></p>\n<h2 id=\"add-preprocessor-file\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"32\" sourceendlinenumber=\"33\">Add <em>Preprocessor</em> file</h2>\n<h3 id=\"step-3-add-preprocessor-file\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">Step 3. Add <em>Preprocessor</em> file</h3>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"35\" sourceendlinenumber=\"35\">Sometimes the input data model is not exactly what <em>Renderer</em> wants, you may want to add some properties to the data model, or modify the data model a little bit before applying the <em>Renderer</em> file. This can be done by creating a <em>Preprocessor</em> file.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Create a file <code>conceptual.html.primary.js</code> under the template folder with the following content:</p>\n<pre sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"39\" sourceendlinenumber=\"44\"><code class=\"lang-javascript\">exports.transform = function (model) {\n    model._extra_property = &quot;Hello world&quot;;\n    return model;\n}\n</code></pre><p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"46\" sourceendlinenumber=\"46\">Update the file <code>conceptual.html.primary.tmpl</code> with the following content:</p>\n<pre sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"48\" sourceendlinenumber=\"51\"><code class=\"lang-mustache\">&lt;h1&gt;{{_extra_property}}&lt;/h1&gt;\n{{{conceptual}}}    \n</code></pre><p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"53\" sourceendlinenumber=\"53\">In the documentation project, run <code>docfx build docfx.json -t c:/docfx_howto/simple_template --serve</code>.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"55\" sourceendlinenumber=\"55\">Open <a href=\"http://localhost:8080\" data-raw-source=\"http://localhost:8080\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"55\" sourceendlinenumber=\"55\">http://localhost:8080</a> and you can see <code>_extra_property</code> is added to the web page.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"57\" sourceendlinenumber=\"57\"><img src=\"images/web_page_with_extra_property.png\" alt=\"Updated Web Page\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"57\" sourceendlinenumber=\"57\"></p>\n<h2 id=\"merge-template-with-default-template\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"59\" sourceendlinenumber=\"60\">Merge template with <code>default</code> template</h2>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"61\" sourceendlinenumber=\"61\">DocFX contains some embedded template resources that you can refer to directly. You can use <code>docfx template list</code> to list available templates provided by DocFX.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"63\" sourceendlinenumber=\"63\">Take <code>default</code> template as an example.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"65\" sourceendlinenumber=\"65\">Run <code>docfx template export default</code>. It exports what&#39;s inside <code>default</code> template into the folder <code>_exported_templates</code>. You can see that there are sets of <em>Preprocessor</em> and <em>Renderer</em> files to deal with different types of documents.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"67\" sourceendlinenumber=\"67\">DocFX supports specifying multiple templates for a documentation project. That allows you to leverage the <code>default</code> template for handling other types of documents, together with your custom template.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"69\" sourceendlinenumber=\"69\">When dealing with multiple templates, DocFX merges the files inside these templates.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"71\" sourceendlinenumber=\"71\">The principle for merging is: if a file name collides then the file in the latter template overwrites the one in the former template.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"73\" sourceendlinenumber=\"73\">For example, you can merge <code>default</code> template and your custom template by calling <code>docfx build docfx.json -t default, c:/docfx_howto/simple_template</code>. Multiple templates are split by a comma <code>,</code> in the command line. Or you can define it in <code>docfx.json</code> by:</p>\n<pre sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"74\" sourceendlinenumber=\"81\"><code>&quot;build&quot;: {\n    &quot;template&quot;: [\n        &quot;default&quot;,\n        &quot;c:/docfx_howto/simple_template&quot;\n    ]\n}\n</code></pre><p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"83\" sourceendlinenumber=\"83\">In the documentation project, run <code>docfx build docfx.json -t default,c:/docfx_howto/simple_template --serve</code>.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"85\" sourceendlinenumber=\"85\">Now the warning message <em>There is no template processing document type(s): Toc</em> disappears because the default template contains <em>Renderer</em> to handle TOC files.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"87\" sourceendlinenumber=\"88\">Open <a href=\"http://localhost:8080/toc.html\" data-raw-source=\"http://localhost:8080/toc.html\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"87\" sourceendlinenumber=\"87\">http://localhost:8080/toc.html</a> and you can see a toc web page.\n<img src=\"images/toc_web_page.png\" alt=\"TOC Web Page\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"88\" sourceendlinenumber=\"88\"></p>\n<div class=\"TIP\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"90\" sourceendlinenumber=\"90\"><h5>Tip</h5><p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"91\" sourceendlinenumber=\"91\">Run <code>docfx template export default</code> to view what&#39;s inside the default template.</p>\n</div>\n<div class=\"NOTE\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"93\" sourceendlinenumber=\"93\"><h5>Note</h5><p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"94\" sourceendlinenumber=\"95\">It is possible that DocFX updates its embedded templates when a new version is released.\nSo please make sure to re-export the template if you overwrite or are dependent on it in your custom template.</p>\n</div>\n<h2 id=\"extension-for-preprocessor-file\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"97\" sourceendlinenumber=\"98\">Extension for <em>Preprocessor</em> file</h2>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"99\" sourceendlinenumber=\"99\">If you want to modify some properties based on DocFX <code>default</code> template&#39;s <em>Preprocessor</em>, you can use <em>Preprocessor</em> extension file to achieve this.</p>\n<p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"101\" sourceendlinenumber=\"101\">For example, if you want to add a property to the managed reference&#39;s data model after <code>default</code> template&#39;s <em>Preprocessor</em>, you can update the file <code>ManagedReference.extension.js</code> in your custom template with the following content:</p>\n<pre sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"102\" sourceendlinenumber=\"117\"><code>/**\n * This method will be called at the start of exports.transform in ManagedReference.html.primary.js\n */\nexports.preTransform = function (model) {\n  return model;\n}\n\n/**\n * This method will be called at the end of exports.transform in ManagedReference.html.primary.js\n */\nexports.postTransform = function (model) {\n  model._extra_property = &quot;Hello world&quot;;\n  return model;\n}\n</code></pre><p sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"118\" sourceendlinenumber=\"118\">Compared with modifying <code>ManagedReference.html.primary.js</code> directely, you needn&#39;t worry about merging your custom templates with DocFX&#39;s embedded templates when DocFX updates.</p>\n","type":"Conceptual","source":{"remote":{"path":"Documentation/tutorial/howto_create_custom_template.md","branch":"doc","repo":"https://github.com/dotnet/docfx.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"path":"../tutorial/howto_create_custom_template.md","documentation":{"remote":{"path":"Documentation/tutorial/howto_create_custom_template.md","branch":"doc","repo":"https://github.com/dotnet/docfx.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"_docfxVersion":"2.15.0.424","_systemKeys":["conceptual","type","source","path","documentation","title","rawTitle","wordCount"],"title":"How-to: Create A Custom Template","rawTitle":"<h1 id=\"how-to-create-a-custom-template\" sourcefile=\"../tutorial/howto_create_custom_template.md\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"2\">How-to: Create A Custom Template</h1>","wordCount":694.0,"__global":{"classesInSubtitle":"Classes","structsInSubtitle":"Structs","interfacesInSubtitle":"Interfaces","enumsInSubtitle":"Enums","delegatesInSubtitle":"Delegates","constructorsInSubtitle":"Constructors","fieldsInSubtitle":"Fields","propertiesInSubtitle":"Properties","methodsInSubtitle":"Methods","eventsInSubtitle":"Events","operatorsInSubtitle":"Operators","eiisInSubtitle":"Explicit Interface Implementations","improveThisDoc":"Improve this Doc","viewSource":"View Source","inheritance":"Inheritance","inheritedMembers":"Inherited Members","namespace":"Namespace","assembly":"Assembly","syntax":"Syntax","overrides":"Overrides","implements":"Implements","remarks":"Remarks","examples":"Examples","seealso":"See Also","declaration":"Declaration","parameters":"Parameters","typeParameters":"Type Parameters","type":"Type","name":"Name","description":"Description","returns":"Returns","fieldValue":"Field Value","propertyValue":"Property Value","eventType":"Event Type","exceptions":"Exceptions","condition":"Condition","extensionMethods":"Extension Methods","note":"<h5>Note</h5>","warning":"<h5>Warning</h5>","tip":"<h5>Tip</h5>","important":"<h5>Important</h5>","caution":"<h5>Caution</h5>","_shared":{}},"_disableToc":false,"docurl":"https://github.com/dotnet/docfx/blob/doc/Documentation/tutorial/howto_create_custom_template.md/#L1"}