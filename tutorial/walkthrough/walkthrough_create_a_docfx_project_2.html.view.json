{"_lang":"csharp","_tocPath":"tutorial/toc.html","_navPath":"toc.html","_rel":"../../","_path":"tutorial/walkthrough/walkthrough_create_a_docfx_project_2.html","_navRel":"../../toc.html","_tocRel":"../toc.html","_navKey":"~/../toc.yml","_tocKey":"~/../tutorial/toc.yml","conceptual":"\n<p sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"4\" sourceendlinenumber=\"4\">After completing <a href=\"~/../tutorial/walkthrough/walkthrough_create_a_docfx_project.md\" data-raw-source=\"[Walkthrough Part I: Generate a Simple Documentation Website](walkthrough_create_a_docfx_project.md)\" sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"4\" sourceendlinenumber=\"4\">Walkthrough Part I: Generate a Simple Documentation Website</a>, we build a website from a set of <code>.md</code> files. We call it <strong>Conceptual Documentation</strong>. In this walkthrough, we will learn to build website from .NET source code, which is called <strong>API Documentation</strong>. We will also integrate <strong>Conceptual Documentation</strong> and <strong>API Documentation</strong> into one website, so that we can navigate from <strong>Conceptual</strong> to <strong>API</strong>, or <strong>API</strong> to <strong>Conceptual</strong> seamlessly. Download the files used in this walkthrough <a href=\"artifacts/walkthrough2.zip\" data-raw-source=\"[here](artifacts/walkthrough2.zip)\" sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"4\" sourceendlinenumber=\"4\">here</a>.</p>\n<p sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"6\" sourceendlinenumber=\"6\">After completing walkthrough part I, our <code>D:\\docfx_walkthrough\\docfx_project</code> folder is in the following structure:</p>\n<pre sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"8\" sourceendlinenumber=\"22\"><code>|- index.md\n|- toc.yml\n|- articles\n|    |- intro.md\n|    |- details1.md\n|    |- details2.md\n|    |- details3.md\n|    |- toc.yml\n|- images\n     |- details1_image.png\n|- api\n     |- index.md\n     |- toc.yml\n</code></pre><h2 id=\"step1-add-a-c-project\" sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"24\" sourceendlinenumber=\"25\">Step1. Add a C# project</h2>\n<ol sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"26\" sourceendlinenumber=\"26\">\n<li sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"26\" sourceendlinenumber=\"26\">Create a subfolder <code>src</code> under <code>D:\\docfx_walkthrough\\docfx_project</code>. Open <em>Visual Studio Community 2015</em> (or an above version) and create a <strong>C# Class Library</strong> <code>HelloDocfx</code> under folder <code>src</code>. In the <code>Class1.cs</code>, add some comments and methods to this class, similar to:</li>\n</ol>\n<pre sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"28\" sourceendlinenumber=\"70\"><code class=\"lang-csharp\">namespace HelloDocfx\n{\n    /// &lt;summary&gt;\n    /// Hello this is **Class1** from *HelloDocfx*\n    /// &lt;/summary&gt;\n    public class Class1\n    {\n        private InnerClass _class;\n        public int Value { get; }\n\n        /// &lt;summary&gt;\n        /// This is a ctor\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;value&quot;&gt;The value of the class&lt;/param&gt;\n        public Class1(int value)\n        {\n            Value = value;\n        }\n\n        public double ConvertToDouble()\n        {\n            return Value;\n        }\n\n        /// &lt;summary&gt;\n        /// A method referencing a inner class\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;name&quot;&gt;The name&lt;/param&gt;\n        /// &lt;param name=&quot;inner&quot;&gt;A inner class with type &lt;seealso cref=&quot;InnerClass&quot;/&gt;&lt;/param&gt;\n        public void SetInnerClass(string name, InnerClass inner)\n        {\n            inner.Name = name;\n            _class = inner;\n        }\n\n        public class InnerClass\n        {\n            public string Name { get; set; }\n        }\n    }\n}\n</code></pre><h2 id=\"step2-generate-metadata-for-the-c-project\" sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"72\" sourceendlinenumber=\"73\">Step2. Generate metadata for the C# project</h2>\n<p sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"74\" sourceendlinenumber=\"74\">Calling <code>docfx metadata</code> under <code>D:\\docfx_walkthrough\\docfx_project</code>. <code>docfx metadata</code> is a sub-command registered in <code>docfx</code>, and it reads configuration in the <code>metadata</code> section from <code>docfx.json</code>. <code>[ &quot;src/**.csproj&quot; ]</code> in <code>metadata/src/files</code> tells <code>docfx</code> to search all the <code>csproj</code> from <code>src</code> subfolder to generate metadata.</p>\n<pre sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"76\" sourceendlinenumber=\"94\"><code class=\"lang-json\">&quot;metadata&quot;: [\n    {\n      &quot;src&quot;: [\n        {\n          &quot;files&quot;: [\n            &quot;src/**.csproj&quot;\n          ],\n          &quot;exclude&quot;: [\n            &quot;**/bin/**&quot;,\n            &quot;**/obj/**&quot;,\n            &quot;_site/**&quot;\n          ]\n        }\n      ],\n      &quot;dest&quot;: &quot;api&quot;\n    }\n  ]\n</code></pre><p sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"96\" sourceendlinenumber=\"96\">This generates several <code>YAML</code> files in the <code>api</code> folder. The <code>YAML</code> file contains the data model extracted from C# source code file. YAML is the metadata format used in <code>docfx</code>. <a href=\"http://dotnet.github.io/docfx/spec/metadata_format_spec.html\" data-raw-source=\"[General Metadata Spec](http://dotnet.github.io/docfx/spec/metadata_format_spec.html)\" sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"96\" sourceendlinenumber=\"96\">General Metadata Spec</a> defines the general schema, and <a href=\"http://dotnet.github.io/docfx/spec/metadata_dotnet_spec.html\" data-raw-source=\"[.NET Metadata Spec](http://dotnet.github.io/docfx/spec/metadata_dotnet_spec.html)\" sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"96\" sourceendlinenumber=\"96\">.NET Metadata Spec</a> defines the metadata schema for .NET languages that <code>docfx</code> can consume.</p>\n<pre sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"97\" sourceendlinenumber=\"102\"><code>|- HelloDocfx.Class1.InnerClass.yml\n|- HelloDocfx.Class1.yml\n|- HelloDocfx.yml\n|- toc.yml\n</code></pre><h2 id=\"step3-build-and-preview-our-website\" sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"104\" sourceendlinenumber=\"105\">Step3. Build and preview our website</h2>\n<p sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"106\" sourceendlinenumber=\"106\">Running the command <code>docfx</code>. <code>docfx</code> reads <code>docfx.json</code> and execute subcommands defined in the config file one by one. Our <code>docfx.json</code> defines <code>metadata</code> and <code>build</code>, so by running <code>docfx</code>, we are actually executing <code>docfx metadata</code> and <code>docfx build</code>, and thus generating the website.</p>\n<p sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"108\" sourceendlinenumber=\"109\">Run <code>docfx serve _site</code>, and the website is now:\n<img src=\"images/walkthrough2_step3.png\" alt=\"Step3\" sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"109\" sourceendlinenumber=\"109\">.</p>\n<h2 id=\"step4-add-another-api-documentation\" sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"111\" sourceendlinenumber=\"112\">Step4. Add another API documentation</h2>\n<p sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"113\" sourceendlinenumber=\"113\">Create another subfolder <code>src2</code> under <code>D:\\docfx_walkthrough\\docfx_project</code>. Besides generating API documentation from project files, <code>docfx</code> can generate documentation directly from source code. Let&#39;s create a <code>Class2.cs</code> as similar to:</p>\n<pre sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"115\" sourceendlinenumber=\"182\"><code class=\"lang-csharp\">namespace HelloDocfx\n{\n    /// &lt;summary&gt;\n    /// Hello this is **Class2** from *HelloDocfx*\n    /// &lt;/summary&gt;\n    public class Class2\n    {\n        private InnerClass _class;\n        public int Value { get; }\n\n        /// &lt;summary&gt;\n        /// This is a ctor\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;value&quot;&gt;The value of the class&lt;/param&gt;\n        public Class2(int value)\n        {\n            Value = value;\n        }\n\n        public double ConvertToDouble()\n        {\n            return Value;\n        }\n\n        /// &lt;summary&gt;\n        /// A method referencing a inner class\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;name&quot;&gt;The name&lt;/param&gt;\n        /// &lt;param name=&quot;inner&quot;&gt;A inner class with type &lt;seealso cref=&quot;InnerClass&quot;/&gt;&lt;/param&gt;\n        public void SetInnerClass(string name, InnerClass inner)\n        {\n            inner.Name = name;\n            _class = inner;\n        }\n\n        public class InnerClass\n        {\n            public string Name { get; set; }\n        }\n    }\n}\n\nAdd it to the `metadata` section of our `docfx.json` as follows.\n\n```json\n&quot;metadata&quot;: [\n    {\n      &quot;src&quot;: [\n        {\n          &quot;files&quot;: [\n            &quot;src/**.csproj&quot;\n          ],\n          &quot;exclude&quot;: [\n            &quot;**/bin/**&quot;,\n            &quot;**/obj/**&quot;,\n            &quot;_site/**&quot;\n          ]\n        }\n      ],\n      &quot;dest&quot;: &quot;api&quot;\n    },\n    {\n      &quot;src&quot;: &quot;src2/**.cs&quot;,\n      &quot;dest&quot;: &quot;api-vb&quot;\n    }\n  ]\n</code></pre><p sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"184\" sourceendlinenumber=\"184\">What it means is that the YAML metadata files for &quot;src2/**.cs&quot; are generated into &quot;api-vb&quot; folder. Let&#39;s also include the generated YAML files in <code>build</code> section:</p>\n<pre sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"185\" sourceendlinenumber=\"194\"><code class=\"lang-json\">  &quot;build&quot;: {\n    &quot;content&quot;: [\n      {\n        &quot;files&quot;: [\n          &quot;api-vb/**.yml&quot;\n        ]\n      }\n      ...\n</code></pre><p sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"196\" sourceendlinenumber=\"196\">For it to be organized and shown to website, we also need to modify our <code>D:\\docfx_walkthrough\\docfx_project\\toc.yml</code> file. Don&#39;t forget to append slash <code>/</code> for the value of <code>href</code>.</p>\n<pre sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"198\" sourceendlinenumber=\"206\"><code>- name: Articles\n  href: articles/\n- name: Api Documentation\n  href: api/\n  homepage: api/index.md\n- name: Another Api Documentation\n  href: api-vb/\n</code></pre><p sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"208\" sourceendlinenumber=\"209\">Now, let&#39;s run <code>docfx --serve</code> again, and the website is now:\n<img src=\"images/walkthrough2_step4.png\" alt=\"Step4\" sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"209\" sourceendlinenumber=\"209\">.</p>\n<h2 id=\"conclusion\" sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"211\" sourceendlinenumber=\"212\">Conclusion</h2>\n<p sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"213\" sourceendlinenumber=\"213\">In this walkthrough, we build a website containing both <strong>Conceptual Documentation</strong> and <strong>API Documentation</strong>. In the upcoming series of advanced walkthroughs, we will learn advanced concepts in <code>docfx</code>, such as <em>cross reference</em> between articles, <em>external reference</em> to other documentations, etc. We will also learn to customize our websites, from theme to layout to metadata extraction.</p>\n<h2 id=\"read-more\" sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"215\" sourceendlinenumber=\"216\">Read more</h2>\n<ul sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"217\" sourceendlinenumber=\"219\">\n<li sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"217\" sourceendlinenumber=\"217\"><p sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"217\" sourceendlinenumber=\"217\"><a href=\"~/../tutorial/walkthrough/walkthrough_create_a_docfx_project.md\" data-raw-source=\"[Walkthrough Part I: Generate a Simple Documentation Website](walkthrough_create_a_docfx_project.md)\" sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"217\" sourceendlinenumber=\"217\">Walkthrough Part I: Generate a Simple Documentation Website</a></p>\n</li>\n<li sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"219\" sourceendlinenumber=\"219\"><p sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"219\" sourceendlinenumber=\"219\"><a href=\"~/../tutorial/walkthrough/advanced_walkthrough.md\" data-raw-source=\"[Walkthrough Advanced: Customize Your Website](advanced_walkthrough.md)\" sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"219\" sourceendlinenumber=\"219\">Walkthrough Advanced: Customize Your Website</a></p>\n</li>\n</ul>\n","type":"Conceptual","source":{"remote":{"path":"Documentation/tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md","branch":"doc","repo":"https://github.com/dotnet/docfx.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"path":"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md","documentation":{"remote":{"path":"Documentation/tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md","branch":"doc","repo":"https://github.com/dotnet/docfx.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"_docfxVersion":"2.15.0.424","_systemKeys":["conceptual","type","source","path","documentation","title","rawTitle","wordCount"],"title":"Walkthrough Part II: Adding API Documentation to the Website","rawTitle":"<h1 id=\"walkthrough-part-ii-adding-api-documentation-to-the-website\" sourcefile=\"../tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"2\">Walkthrough Part II: Adding API Documentation to the Website</h1>","wordCount":789.0,"__global":{"classesInSubtitle":"Classes","structsInSubtitle":"Structs","interfacesInSubtitle":"Interfaces","enumsInSubtitle":"Enums","delegatesInSubtitle":"Delegates","constructorsInSubtitle":"Constructors","fieldsInSubtitle":"Fields","propertiesInSubtitle":"Properties","methodsInSubtitle":"Methods","eventsInSubtitle":"Events","operatorsInSubtitle":"Operators","eiisInSubtitle":"Explicit Interface Implementations","improveThisDoc":"Improve this Doc","viewSource":"View Source","inheritance":"Inheritance","inheritedMembers":"Inherited Members","namespace":"Namespace","assembly":"Assembly","syntax":"Syntax","overrides":"Overrides","implements":"Implements","remarks":"Remarks","examples":"Examples","seealso":"See Also","declaration":"Declaration","parameters":"Parameters","typeParameters":"Type Parameters","type":"Type","name":"Name","description":"Description","returns":"Returns","fieldValue":"Field Value","propertyValue":"Property Value","eventType":"Event Type","exceptions":"Exceptions","condition":"Condition","extensionMethods":"Extension Methods","note":"<h5>Note</h5>","warning":"<h5>Warning</h5>","tip":"<h5>Tip</h5>","important":"<h5>Important</h5>","caution":"<h5>Caution</h5>","_shared":{}},"_disableToc":false,"docurl":"https://github.com/dotnet/docfx/blob/doc/Documentation/tutorial/walkthrough/walkthrough_create_a_docfx_project_2.md/#L1"}