{"_lang":"csharp","_tocPath":"tutorial/toc.html","_navPath":"toc.html","_rel":"../","_path":"tutorial/howto_add_a_customized_post_processor.html","_navRel":"../toc.html","_tocRel":"toc.html","_navKey":"~/../toc.yml","_tocKey":"~/../tutorial/toc.yml","conceptual":"\n<p sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"4\" sourceendlinenumber=\"6\">We provide the ability to process output files by adding a customized post-processor.\nIn DocFX, the index file for full-text-search is generated by one post-processor named <code>ExtractSearchIndex</code>.\nIn this topic, we will show how to add a customized post-processor.</p>\n<h2 id=\"step0-preparation\" sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"8\" sourceendlinenumber=\"8\">Step0: Preparation</h2>\n<ul sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"10\" sourceendlinenumber=\"16\">\n<li sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"10\" sourceendlinenumber=\"10\">Create a new C# class library project in <code>Visual Studio</code>.</li>\n<li sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"11\" sourceendlinenumber=\"13\">Add nuget packages:<ul sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"12\" sourceendlinenumber=\"13\">\n<li sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"12\" sourceendlinenumber=\"12\"><a href=\"https://www.nuget.org/packages/System.Collections.Immutable/1.1.37\" data-raw-source=\"[`System.Collections.Immutable`](https://www.nuget.org/packages/System.Collections.Immutable/1.1.37)\" sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"12\" sourceendlinenumber=\"12\"><code>System.Collections.Immutable</code></a> with version 1.1.37</li>\n<li sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"13\" sourceendlinenumber=\"13\"><a href=\"https://www.nuget.org/packages/Microsoft.Composition/1.0.27\" data-raw-source=\"[`Microsoft.Composition`](https://www.nuget.org/packages/Microsoft.Composition/1.0.27)\" sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"13\" sourceendlinenumber=\"13\"><code>Microsoft.Composition</code></a> with version 1.0.27</li>\n</ul>\n</li>\n<li sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"14\" sourceendlinenumber=\"16\">Add <code>Microsoft.DocAsCode.Plugins</code>\nIf you are building DocFX from source code, add this reference to the project,\notherwise add the nuget package <code>Microsoft.DocAsCode.Plugins</code> with the same version as DocFX.</li>\n</ul>\n<h2 id=\"step1-create-a-new-class-myprocessorcs-with-the-following-code\" sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"18\" sourceendlinenumber=\"18\">Step1: Create a new class (MyProcessor.cs) with the following code:</h2>\n<pre sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"26\"><code class=\"lang-csharp\">[Export(nameof(MyProcessor), typeof(IPostProcessor))]\npublic class MyProcessor : IPostProcessor\n{\n    // TODO: implements IPostProcessor\n}\n</code></pre><h2 id=\"step2-update-global-metadata\" sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"28\" sourceendlinenumber=\"28\">Step2: Update global metadata</h2>\n<pre sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"30\" sourceendlinenumber=\"36\"><code class=\"lang-csharp\">public ImmutableDictionary&lt;string, object&gt; PrepareMetadata(ImmutableDictionary&lt;string, object&gt; metadata)\n{\n    // TODO: add/remove/update property from global metadata\n    return metadata;\n}\n</code></pre><p sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">In this method, we can update the global metadata before building all the files declared in <code>docfx.json</code>. Otherwise, you can just return the metadata from parameters if you don&#39;t need to change global metadata.</p>\n<p sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"40\" sourceendlinenumber=\"40\">Using <code>ExtractSearchIndex</code> for example, we add <code>&quot;_enableSearch&quot;: true</code> in global metadata. The default template would then know it should load a search box in the navbar.</p>\n<h2 id=\"step3-process-all-the-files-generated-by-docfx\" sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"42\" sourceendlinenumber=\"42\">Step3: Process all the files generated by DocFX</h2>\n<pre sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"44\" sourceendlinenumber=\"50\"><code class=\"lang-csharp\">    public Manifest Process(Manifest manifest, string outputFolder)\n    {\n        // TODO: add/remove/update all the files included in manifest\n        return manifest;\n    }\n</code></pre><p sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"52\" sourceendlinenumber=\"52\">Input for the method <code>manifest</code> contains a list of all files to process, and <code>outputFolder</code> specifies the output folder where our static website will be placed. We can implement customized operations here to process all files generated by DocFX.</p>\n<div class=\"NOTE\" sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"54\" sourceendlinenumber=\"54\"><h5>Note</h5><p sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"55\" sourceendlinenumber=\"55\">Post-processor aims to process the output files, so the <code>FileModel</code> can&#39;t be accessed in this phase. If some metadata is needed here, an option is to save it in <code>FileModel.ManifestProperties</code> in build phase, then access it through <code>ManifestItem.Metadata</code>. Another option is to save it somewhere in output files, like HTML&#39;s <code>&lt;meta&gt;</code> Tag.</p>\n</div>\n<p sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"57\" sourceendlinenumber=\"57\">Using <code>ExtractSearchIndex</code> for example again, we traverse all HTML files, extract key words from these HTML files and save a file named <code>index.json</code> under the <code>outputFolder</code>. Finally we return the manifest which is not modified.</p>\n<h2 id=\"step4-build-your-project-and-copy-the-output-dll-files-to\" sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"59\" sourceendlinenumber=\"59\">Step4: Build your project and copy the output dll files to:</h2>\n<ul sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"61\" sourceendlinenumber=\"64\">\n<li sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"61\" sourceendlinenumber=\"61\">Global: the folder with name <code>Plugins</code> under DocFX.exe</li>\n<li sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"62\" sourceendlinenumber=\"64\"><p sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"62\" sourceendlinenumber=\"62\">Non-global: the folder with name <code>Plugins</code> under a template folder, then run <code>DocFX build</code> command with parameter <code>-t {template}</code>.</p>\n<p sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"64\" sourceendlinenumber=\"64\">  <em>Hint</em>: DocFX can merge templates, so we can specify multiple template folders as <code>DocFX build -t {templateForRender},{templateForPlugins}</code>. Each of the template folders should have a subfolder named <code>Plugins</code> with exported assemblies.</p>\n</li>\n</ul>\n<h2 id=\"step5-add-your-post-processor-in-docfxjson\" sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"66\" sourceendlinenumber=\"66\">Step5: Add your post processor in <code>docfx.json</code></h2>\n<p sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"68\" sourceendlinenumber=\"68\">In this step, we need to enable the processor by adding its name in <code>docfx.json</code>. Here is an example:</p>\n<pre sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"70\" sourceendlinenumber=\"77\"><code class=\"lang-json\">{\n  &quot;build&quot;: {\n    ...\n    &quot;postProcessors&quot;: [&quot;OutputPDF&quot;, &quot;BeautifyHTML&quot;, &quot;OutputPDF&quot;]\n  }\n}\n</code></pre><p sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"79\" sourceendlinenumber=\"81\">As you can see, the <code>postProcessors</code> is an array, which means it could have multiple processors.\nIt needs to be pointed out that the order of <code>postProcessors</code> written in <code>docfx.json</code> is also the order to process output files.\nIn the above example, DocFX will run <code>OutputPDF</code> first, then <code>BeautifyHTML</code>, and then <code>OutputPDF</code> again.</p>\n<p sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"83\" sourceendlinenumber=\"83\">If you want to enable the post processors without changing <code>docfx.json</code>, you can use the build command option like <code>docfx build --postProcessors=OutputPDF,BeautifyHTML,OutputPDF</code>.</p>\n<p sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"85\" sourceendlinenumber=\"85\">One more thing need to be noted: the build command option <code>postProcessors</code> would override the corresponding configuration in <code>docfx.json</code>.</p>\n","type":"Conceptual","source":{"remote":{"path":"Documentation/tutorial/howto_add_a_customized_post_processor.md","branch":"doc","repo":"https://github.com/dotnet/docfx.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"path":"../tutorial/howto_add_a_customized_post_processor.md","documentation":{"remote":{"path":"Documentation/tutorial/howto_add_a_customized_post_processor.md","branch":"doc","repo":"https://github.com/dotnet/docfx.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"_docfxVersion":"2.15.0.424","_systemKeys":["conceptual","type","source","path","documentation","title","rawTitle","wordCount"],"title":"How-to: Add a customized post-processor","rawTitle":"<h1 id=\"how-to-add-a-customized-post-processor\" sourcefile=\"../tutorial/howto_add_a_customized_post_processor.md\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"2\">How-to: Add a customized post-processor</h1>","wordCount":545.0,"__global":{"classesInSubtitle":"Classes","structsInSubtitle":"Structs","interfacesInSubtitle":"Interfaces","enumsInSubtitle":"Enums","delegatesInSubtitle":"Delegates","constructorsInSubtitle":"Constructors","fieldsInSubtitle":"Fields","propertiesInSubtitle":"Properties","methodsInSubtitle":"Methods","eventsInSubtitle":"Events","operatorsInSubtitle":"Operators","eiisInSubtitle":"Explicit Interface Implementations","improveThisDoc":"Improve this Doc","viewSource":"View Source","inheritance":"Inheritance","inheritedMembers":"Inherited Members","namespace":"Namespace","assembly":"Assembly","syntax":"Syntax","overrides":"Overrides","implements":"Implements","remarks":"Remarks","examples":"Examples","seealso":"See Also","declaration":"Declaration","parameters":"Parameters","typeParameters":"Type Parameters","type":"Type","name":"Name","description":"Description","returns":"Returns","fieldValue":"Field Value","propertyValue":"Property Value","eventType":"Event Type","exceptions":"Exceptions","condition":"Condition","extensionMethods":"Extension Methods","note":"<h5>Note</h5>","warning":"<h5>Warning</h5>","tip":"<h5>Tip</h5>","important":"<h5>Important</h5>","caution":"<h5>Caution</h5>","_shared":{}},"_disableToc":false,"docurl":"https://github.com/dotnet/docfx/blob/doc/Documentation/tutorial/howto_add_a_customized_post_processor.md/#L1"}