{"_lang":"csharp","_tocPath":"tutorial/toc.html","_navPath":"toc.html","_rel":"../","_path":"tutorial/intro_markdown_lite.html","_navRel":"../toc.html","_tocRel":"toc.html","_navKey":"~/../toc.yml","_tocKey":"~/../tutorial/toc.yml","conceptual":"\n<h2 id=\"introduction\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"3\" sourceendlinenumber=\"3\">Introduction</h2>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"5\" sourceendlinenumber=\"5\">Markdown lite is a simple markdown tool to markup <code>md</code> file.</p>\n<h2 id=\"design-goal\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"7\" sourceendlinenumber=\"7\">Design goal</h2>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"9\" sourceendlinenumber=\"9\">We write this tool for good extensibility, so our implementation should obey following principles:</p>\n<ol sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"11\" sourceendlinenumber=\"17\">\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"11\" sourceendlinenumber=\"13\">Extensibility:<ul sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"12\" sourceendlinenumber=\"13\">\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"12\" sourceendlinenumber=\"12\">Support markdown syntax extension.</li>\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"13\" sourceendlinenumber=\"13\">Support validation extension.</li>\n</ul>\n</li>\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"14\" sourceendlinenumber=\"15\">Correctness:\nWe follow GFM syntax, but when some rules is too hard to implement, just breaking.</li>\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"16\" sourceendlinenumber=\"17\">Performance:\nPerformance is not our major concern.</li>\n</ol>\n<h2 id=\"steps\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"19\" sourceendlinenumber=\"19\">Steps</h2>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"21\" sourceendlinenumber=\"21\">There are three steps when calling <a href=\"xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownEngine.Markup(System.String,System.String)\" data-raw-source=\"[markup method](xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownEngine.Markup(System.String,System.String))\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"21\" sourceendlinenumber=\"21\">markup method</a>:</p>\n<ul sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"22\" sourceendlinenumber=\"24\">\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"22\" sourceendlinenumber=\"22\"><a href=\"xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownParser\" data-raw-source=\"[Parse](xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownParser)\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"22\" sourceendlinenumber=\"22\">Parse</a></li>\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"23\" sourceendlinenumber=\"23\"><a href=\"xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownTokenRewriter\" data-raw-source=\"[Rewrite](xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownTokenRewriter)\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"23\" sourceendlinenumber=\"23\">Rewrite</a> or <a href=\"xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownTokenValidator\" data-raw-source=\"[validate](xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownTokenValidator)\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"23\" sourceendlinenumber=\"23\">validate</a></li>\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"24\" sourceendlinenumber=\"24\"><a href=\"xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownRenderer\" data-raw-source=\"[Render](xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownRenderer)\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"24\" sourceendlinenumber=\"24\">Render</a></li>\n</ul>\n<h3 id=\"step-1-parse\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"26\" sourceendlinenumber=\"26\">Step 1: Parse</h3>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"28\" sourceendlinenumber=\"29\">In this step, it will parse markdown text to <a href=\"xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownToken\" data-raw-source=\"[tokens](xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownToken)\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"28\" sourceendlinenumber=\"28\">tokens</a>.\nThe parser is based on <a href=\"xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownRule\" data-raw-source=\"[rules](xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownRule)\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"29\" sourceendlinenumber=\"29\">rules</a>, which make up the <a href=\"xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownContext\" data-raw-source=\"[context](xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownContext)\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"29\" sourceendlinenumber=\"29\">context</a>.</p>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"31\" sourceendlinenumber=\"33\">For example,\n<a href=\"xref:Microsoft.DocAsCode.MarkdownLite.MarkdownHeadingBlockToken\" data-raw-source=\"[heading token](xref:Microsoft.DocAsCode.MarkdownLite.MarkdownHeadingBlockToken)\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"32\" sourceendlinenumber=\"32\">heading token</a> is created by <a href=\"xref:Microsoft.DocAsCode.MarkdownLite.MarkdownHeadingBlockRule\" data-raw-source=\"[heading rule](xref:Microsoft.DocAsCode.MarkdownLite.MarkdownHeadingBlockRule)\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"32\" sourceendlinenumber=\"32\">heading rule</a>,\nthe heading rule is belonging to <a href=\"xref:Microsoft.DocAsCode.MarkdownLite.MarkdownBlockContext\" data-raw-source=\"[block context](xref:Microsoft.DocAsCode.MarkdownLite.MarkdownBlockContext)\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"33\" sourceendlinenumber=\"33\">block context</a>.</p>\n<h3 id=\"step-2-rewrite-or-validate\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"35\" sourceendlinenumber=\"35\">Step 2: Rewrite or validate</h3>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"38\">In this step, it will walk through all <a href=\"xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownToken\" data-raw-source=\"[tokens](xref:Microsoft.DocAsCode.MarkdownLite.IMarkdownToken)\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">tokens</a>,\nwe can change it to another, or just validate.</p>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"40\" sourceendlinenumber=\"40\">For example, we can create a rewriter to change all heading token with depth + 1:</p>\n<pre sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"42\" sourceendlinenumber=\"45\"><code class=\"lang-csharp\">MarkdownTokenRewriterFactory.FromLambda&lt;IMarkdownRewriteEngine, MarkdownHeadingBlockToken&gt;(\n    (engine, token) =&gt; new MarkdownHeadingBlockToken(token.Rule, token.Context, token.Content, token.Id, token.Depth + 1, token.SourceInfo);\n</code></pre><h3 id=\"step-3-render\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"47\" sourceendlinenumber=\"47\">Step 3: Render</h3>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"49\" sourceendlinenumber=\"51\">In this step, it renders models to text content (html format by default).\nTo simplify extension, we created an <a href=\"xref:Microsoft.DocAsCode.MarkdownLite.MarkdownRendererAdapter\" data-raw-source=\"[adapter](xref:Microsoft.DocAsCode.MarkdownLite.MarkdownRendererAdapter)\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"50\" sourceendlinenumber=\"50\">adapter</a>,\nthe adapter invoke methods by following rules:</p>\n<ol sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"53\" sourceendlinenumber=\"60\">\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"53\" sourceendlinenumber=\"53\">Method name is <code>Render</code></li>\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"54\" sourceendlinenumber=\"54\">Instance method</li>\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"55\" sourceendlinenumber=\"55\">Return type is <xref href=\"Microsoft.DocAsCode.MarkdownLite.StringBuffer\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@Microsoft.DocAsCode.MarkdownLite.StringBuffer\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"55\" sourceendlinenumber=\"55\"></xref></li>\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"56\" sourceendlinenumber=\"59\">The count of parameters is 3, and types are following:<ol sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"57\" sourceendlinenumber=\"59\">\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"57\" sourceendlinenumber=\"57\"><xref href=\"Microsoft.DocAsCode.MarkdownLite.IMarkdownRenderer\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@Microsoft.DocAsCode.MarkdownLite.IMarkdownRenderer\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"57\" sourceendlinenumber=\"57\"></xref> or any type implements it.</li>\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"58\" sourceendlinenumber=\"58\"><xref href=\"Microsoft.DocAsCode.MarkdownLite.IMarkdownToken\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@Microsoft.DocAsCode.MarkdownLite.IMarkdownToken\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"58\" sourceendlinenumber=\"58\"></xref> or any type implements it.</li>\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"59\" sourceendlinenumber=\"59\"><xref href=\"Microsoft.DocAsCode.MarkdownLite.IMarkdownContext\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@Microsoft.DocAsCode.MarkdownLite.IMarkdownContext\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"59\" sourceendlinenumber=\"59\"></xref> or any type implements it.</li>\n</ol>\n</li>\n<li sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"60\" sourceendlinenumber=\"60\">Always invoke the best overloaded method (The best is defined by <a href=\"https://msdn.microsoft.com/en-us/library/microsoft.csharp.runtimebinder.binder.invoke(v=vs.110).aspx\" data-raw-source=\"[binder](https://msdn.microsoft.com/en-us/library/microsoft.csharp.runtimebinder.binder.invoke(v=vs.110).aspx)\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"60\" sourceendlinenumber=\"60\">binder</a>).</li>\n</ol>\n<h2 id=\"engine-and-engine-builder\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"62\" sourceendlinenumber=\"62\">Engine and engine builder</h2>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"64\" sourceendlinenumber=\"66\">Engine is a set of parser, rewriter and renderer.\nIt can markup a markdown file to html file (or others).\nBut it cannot be invoked in parallel.</p>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"68\" sourceendlinenumber=\"70\">So we create an <a href=\"xref:Microsoft.DocAsCode.MarkdownLite.MarkdownEngineBuilder\" data-raw-source=\"[engine builder](xref:Microsoft.DocAsCode.MarkdownLite.MarkdownEngineBuilder)\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"68\" sourceendlinenumber=\"68\">engine builder</a>.\nIt defines all the rules of parser, rewriter and renderer.\nIt can create instances when needed.</p>\n<h2 id=\"how-to-customize-markdown-syntax\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"72\" sourceendlinenumber=\"72\">How to customize markdown syntax</h2>\n<h3 id=\"define-markdown-syntax\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"74\" sourceendlinenumber=\"74\">Define markdown syntax</h3>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"76\" sourceendlinenumber=\"76\">Define markdown:</p>\n<pre sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"78\" sourceendlinenumber=\"80\"><code class=\"lang-md\">: My label\n</code></pre><p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"82\" sourceendlinenumber=\"82\">should be rendered as following html:</p>\n<pre sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"84\" sourceendlinenumber=\"86\"><code class=\"lang-html\">&lt;div id=&quot;My label&quot;&gt;&lt;/div&gt;\n</code></pre><h3 id=\"select-token-kind\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"88\" sourceendlinenumber=\"88\">Select token kind</h3>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"90\" sourceendlinenumber=\"92\">First of all, we should select the context for this rule.\nAnd in this goal, the new line is required.\nSo it should be a <a href=\"https://daringfireball.net/projects/markdown/syntax#block\" data-raw-source=\"[block token](https://daringfireball.net/projects/markdown/syntax#block)\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"92\" sourceendlinenumber=\"92\">block token</a>, all of the names for class should contain <code>Block</code>.</p>\n<h3 id=\"define-token\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"94\" sourceendlinenumber=\"94\">Define token</h3>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"96\" sourceendlinenumber=\"96\">Create a token class like following:</p>\n<pre sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"98\" sourceendlinenumber=\"118\"><code class=\"lang-csharp\">public class MarkdownMyLabelBlockToken : IMarkdownToken\n{\n    public MarkdownMyLabelBlockToken(IMarkdownRule rule, IMarkdownContext context, string label, SourceInfo sourceInfo)\n    {\n        Rule = rule;\n        Context = context;\n        Label = label;\n        SourceInfo = sourceInfo;\n    }\n\n    public IMarkdownRule Rule { get; }\n\n    public IMarkdownContext Context { get; }\n\n    public string Label { get; }\n\n    public SourceInfo SourceInfo { get; }\n}\n</code></pre><h3 id=\"define-rule\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"120\" sourceendlinenumber=\"120\">Define rule</h3>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"122\" sourceendlinenumber=\"122\">Create a rule class as following:</p>\n<pre sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"124\" sourceendlinenumber=\"142\"><code class=\"lang-csharp\">public class MarkdownMyLabelBlockRule : IMarkdownRule\n{\n    public virtual string Name =&gt; &quot;My Label&quot;;\n\n    public virtual Regex LabelRegex { get; } = new Regex(&quot;^\\: *([^\\n]+?) *(?:\\n+|$)&quot;);\n\n    public virtual IMarkdownToken TryMatch(IMarkdownParser parser, IMarkdownParsingContext context)\n    {\n        var match = LabelRegex.Match(context.CurrentMarkdown);\n        if (match.Length == 0)\n        {\n            return null;\n        }\n        var sourceInfo = context.Consume(match.Length);\n        return new MarkdownMyLabelBlockToken(this, parser.Context, match.Group[1].Value, sourceInfo);\n    }\n}\n</code></pre><h3 id=\"define-renderer\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"144\" sourceendlinenumber=\"144\">Define renderer</h3>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"146\" sourceendlinenumber=\"146\">Create a renderer class as following:</p>\n<pre sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"148\" sourceendlinenumber=\"156\"><code class=\"lang-csharp\">public class MyRenderer : HtmlRenderer\n{\n    public virtual StringBuffer Render(IMarkdownRenderer renderer, MarkdownMyLabelBlockToken token, IMarkdownContext context)\n    {\n        return StringBuffer.Empty + &quot;&lt;div id=\\&quot;&quot; + token.Label + &quot;\\&quot;&gt;&lt;/div&gt;&quot;;\n    }\n}\n</code></pre><h3 id=\"define-engine-builder\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"158\" sourceendlinenumber=\"158\">Define engine builder</h3>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"160\" sourceendlinenumber=\"160\">Create an engine builder class as following:</p>\n<pre sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"162\" sourceendlinenumber=\"170\"><code class=\"lang-csharp\">public class MyEngineBuilder : GfmEngineBuilder\n{\n    public MyEngineBuilder(Options options) : base(options)\n    {\n         BlockRules = BlockRules.Insert(0, new MarkdownMyLabelBlockRule());\n    }\n}\n</code></pre><h3 id=\"markup-it\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"172\" sourceendlinenumber=\"172\">Markup it!</h3>\n<p sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"174\" sourceendlinenumber=\"174\">Then use your custom markdown in your code:</p>\n<pre sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"176\" sourceendlinenumber=\"183\"><code class=\"lang-csharp\">public string MarkupMyMarkdown(string markdown)\n{\n    var builder = new MyEngineBuilder(new Options());\n    var engine = builder.CreateEngine(new MyRender())\n    return engine.Markup(markdown);\n}\n</code></pre>","type":"Conceptual","source":{"remote":{"path":"Documentation/tutorial/intro_markdown_lite.md","branch":"doc","repo":"https://github.com/dotnet/docfx.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"path":"../tutorial/intro_markdown_lite.md","documentation":{"remote":{"path":"Documentation/tutorial/intro_markdown_lite.md","branch":"doc","repo":"https://github.com/dotnet/docfx.git"},"startLine":0.0,"endLine":0.0,"isExternal":false},"_docfxVersion":"2.15.0.424","_systemKeys":["conceptual","type","source","path","documentation","title","rawTitle","wordCount"],"title":"Markdown Lite","rawTitle":"<h1 id=\"markdown-lite\" sourcefile=\"../tutorial/intro_markdown_lite.md\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"1\">Markdown Lite</h1>","wordCount":571.0,"__global":{"classesInSubtitle":"Classes","structsInSubtitle":"Structs","interfacesInSubtitle":"Interfaces","enumsInSubtitle":"Enums","delegatesInSubtitle":"Delegates","constructorsInSubtitle":"Constructors","fieldsInSubtitle":"Fields","propertiesInSubtitle":"Properties","methodsInSubtitle":"Methods","eventsInSubtitle":"Events","operatorsInSubtitle":"Operators","eiisInSubtitle":"Explicit Interface Implementations","improveThisDoc":"Improve this Doc","viewSource":"View Source","inheritance":"Inheritance","inheritedMembers":"Inherited Members","namespace":"Namespace","assembly":"Assembly","syntax":"Syntax","overrides":"Overrides","implements":"Implements","remarks":"Remarks","examples":"Examples","seealso":"See Also","declaration":"Declaration","parameters":"Parameters","typeParameters":"Type Parameters","type":"Type","name":"Name","description":"Description","returns":"Returns","fieldValue":"Field Value","propertyValue":"Property Value","eventType":"Event Type","exceptions":"Exceptions","condition":"Condition","extensionMethods":"Extension Methods","note":"<h5>Note</h5>","warning":"<h5>Warning</h5>","tip":"<h5>Tip</h5>","important":"<h5>Important</h5>","caution":"<h5>Caution</h5>","_shared":{}},"_disableToc":false,"docurl":"https://github.com/dotnet/docfx/blob/doc/Documentation/tutorial/intro_markdown_lite.md/#L1"}